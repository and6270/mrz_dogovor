
&Перед("ДобавитьКомандыПечати")
Процедура Расш1255_ДобавитьКомандыПечати(КомандыПечати)
	КомандаПечати = КомандыПечати.Добавить();	// СтрокаТаблицыЗначений
	КомандаПечати.Идентификатор = "СчетНаОплатуДопТовары";
	КомандаПечати.Представление = НСтр("ru = '++ Счет на оплату (доп товары)'");
	КомандаПечати.Порядок = 79; 
	
	КомандаПечати = КомандыПечати.Добавить();	// СтрокаТаблицыЗначений
	КомандаПечати.Идентификатор = "ТОРГ12ДопТовары";
	КомандаПечати.Представление = НСтр("ru = '++ Товарная накладная (ТОРГ-12 доп товары)'");
	КомандаПечати.Порядок = 80; 
	
	КомандаПечати = КомандыПечати.Добавить();	// СтрокаТаблицыЗначений
	КомандаПечати.Идентификатор = "РозничныйДоговор";
	КомандаПечати.Представление = НСтр("ru = '++ Договор розничной купли-продажи'");
	КомандаПечати.Порядок = 81;
КонецПроцедуры 


&Перед("Печать")
Процедура Расш1255_Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаОплатуДопТовары") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СчетНаОплатуДопТовары",
			НСтр("ru = 'Счет на оплату (доп товары)'"),
			СформироватьСчетНаОплатуДопТовары(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),
			);
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12ДопТовары") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ТОРГ12ДопТовары",
			НСтр("ru = 'Товарная накладная (ТОРГ-12)'"),
			СформироватьПечатнуюФормуТоргДоп(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),
			);
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РозничныйДоговор") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"РозничныйДоговор",
			НСтр("ru = 'Договор розничной купли-продажи'"),
			СформироватьРозничныйДоговорКП(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),
			);
	КонецЕсли;	
КонецПроцедуры 

#Область ПечатьТОРГ12
Функция СформироватьПечатнуюФормуТоргДоп(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТОРГ12_2024";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_ТОРГ12_ru");
	
	ПервыйДокумент = Истина;
	КоэффициентПересчетаВТонны     = НоменклатураСервер.КоэффициентПересчетаВТонны(Константы.ЕдиницаИзмеренияВеса.Получить());
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	               |	РеализацияТоваровУслуг.Номер КАК Номер,
	               |	РеализацияТоваровУслуг.Дата КАК Дата,
	               |	РеализацияТоваровУслуг.Статус КАК Статус,
	               |	РеализацияТоваровУслуг.Партнер КАК Партнер,
	               |	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	               |	РеализацияТоваровУслуг.Организация КАК Организация,
	               |	РеализацияТоваровУслуг.Отпустил КАК Кладовщик,
	               |	РеализацияТоваровУслуг.ОтпустилДолжность КАК ДолжностьКладовщика,
	               |	РеализацияТоваровУслуг.Организация.Префикс КАК Префикс,
	               |	РеализацияТоваровУслуг.Основание КАК Основание,
	               |	РеализацияТоваровУслуг.ОснованиеДата КАК ОснованиеДата,
	               |	РеализацияТоваровУслуг.ОснованиеНомер КАК ОснованиеНомер,
	               |	ВЫБОР
	               |		КОГДА РеализацияТоваровУслуг.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |			ТОГДА РеализацияТоваровУслуг.Контрагент
	               |		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
	               |	КОНЕЦ КАК Грузополучатель,
	               |	ВЫБОР
	               |		КОГДА РеализацияТоваровУслуг.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |			ТОГДА РеализацияТоваровУслуг.Организация
	               |		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
	               |	КОНЕЦ КАК Грузоотправитель,
	               |	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	               |	РеализацияТоваровУслуг.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	               |	РеализацияТоваровУслуг.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	               |	РеализацияТоваровУслуг.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
	               |	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	               |	РеализацияТоваровУслуг.Валюта КАК Валюта,
	               |	РеализацияТоваровУслуг.НалогообложениеНДС КАК НалогообложениеНДС,
	               |	РеализацияТоваровУслуг.ДоверенностьНомер КАК ДоверенностьНомер,
	               |	РеализацияТоваровУслуг.ДоверенностьДата КАК ДоверенностьДата,
	               |	РеализацияТоваровУслуг.ДоверенностьВыдана КАК ДоверенностьВыдана,
	               |	РеализацияТоваровУслуг.ДоверенностьЛицо КАК ДоверенностьЛицо,
	               |	РеализацияТоваровУслуг.Расш1255_ТоварыДляПечати.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		КоличествоУпаковок КАК КоличествоМест,
	               |		Цена КАК Цена,
	               |		Сумма КАК СуммаСНДС,
	               |		Номенклатура.Код КАК НоменклатураКод,
	               |		Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
	               |		Упаковка.Наименование КАК ЕдиницаИзмеренияНаименование,
	               |		Упаковка.Код КАК ЕдиницаИзмеренияКод,
	               |		Упаковка.Наименование КАК ВидУпаковки,
	               |		1 КАК КоличествоВОдномМесте,
	               |		КоличествоУпаковок КАК Количество,
	               |		Сумма КАК СуммаБезНДС,
	               |		""Без НДС"" КАК СтавкаНДС
	               |	) КАК Расш1255_ТоварыДляПечати,
	               |	РеализацияТоваровУслуг.Расш1255_ИспользоватьТоварыДляПечати КАК Расш1255_ИспользоватьТоварыДляПечати,
	               |	РеализацияТоваровУслуг.Руководитель.ФизическоеЛицо.Наименование КАК Руководитель,
	               |	РеализацияТоваровУслуг.Руководитель.Должность КАК ДолжностьРуководителя,
	               |	РеализацияТоваровУслуг.ГлавныйБухгалтер.Наименование КАК ГлавныйБухгалтер
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)";
	Запрос.Параметры.Вставить("МассивДокументов", МассивОбъектов); 
	ДанныеПечати = Запрос.Выполнить().Выбрать();
	
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если НЕ ДанныеПечати.Расш1255_ИспользоватьТоварыДляПечати Тогда // дописать как называется флажек о доп товарах в запросе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В документе %1 отсутствуют товары. Печать ТОРГ-12 не требуется'"),
					ДанныеПечати.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка); 
			Продолжить;
		КонецЕсли;
			
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1; 
		ЗаполнитьРеквизитыШапкиТОРГ12(ДанныеПечати, Макет, ТабличныйДокумент);
		
		НомерСтраницы = 1;
        ИтоговыеСуммы = СтруктураИтоговыеСуммы();

		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть докмента
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ОбластьМакетаСтандарт   = Макет.ПолучитьОбласть("Строка");
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьВсего            = Макет.ПолучитьОбласть("Всего");     
		
		ВыводШапки = 0;
		
		//Если ДанныеДляПечати.РезультатПоШапке.Колонки.Найти("ВыводитьКодНоменклатуры") <> Неопределено Тогда
		//	ВыводитьКодНоменклатуры = ДанныеПечати.ВыводитьКодНоменклатуры;
		//Иначе
		//	ВыводитьКодНоменклатуры = Истина;
		//КонецЕсли;
		
		ОперацияОблагаетсяНДСУПокупателя = Ложь;
		//Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПечати,"НалогообложениеНДС") 
		//	И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
		//	ОперацияОблагаетсяНДСУПокупателя = Истина;
		//КонецЕсли;
		
		СтрокаТовары = ДанныеПечати.Расш1255_ТоварыДляПечати.Выбрать();
		КоличествоСтрок = СтрокаТовары.Количество();
		НомерСтроки = 0;
		Пока СтрокаТовары.Следующий() Цикл
			
			//Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
			//	ОбластьМакета = ОбластьМакетаНабор;
			//ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
			//	ОбластьМакета = ОбластьМакетаКомплектующие;
			//Иначе
				ОбластьМакета = ОбластьМакетаСтандарт;
			//КонецЕсли;
			
			//Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
			//	ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, Неопределено,,,ВыводитьСерии);
			//Иначе
				НомерСтроки = НомерСтроки + 1;
				ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
				//ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, НомерСтроки);
			//КонецЕсли;
			
			//Если ОперацияОблагаетсяНДСУПокупателя Тогда
			//	ОбластьМакета.Параметры.СтавкаНДС = НСтр("ru='НДС исчисляется налоговым агентом'", Метаданные.Языки.Русский.КодЯзыка);
			//	ОбластьМакета.Параметры.СуммаСНДС = "--";
			//	ОбластьМакета.Параметры.СуммаНДС = "--";
			//КонецЕсли;
			
			Если НомерСтроки = 0 И ВыводШапки <> 2 Тогда
				ВыводШапки = 1;
			КонецЕсли;
			
			Если (НомерСтроки = 1 И ВыводШапки = 0) ИЛИ (НомерСтроки = 0 И ВыводШапки = 1) Тогда
				
				ВыводШапки = 2;
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("НомерСтраницы", "Страница " + НомерСтраницы);
				ОбластьЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			КонецЕсли;
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
			Если НомерСтроки = КоличествоСтрок Тогда
				ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки,
					ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеПечати.Организация));
				ОбластьПодвала = ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати, ИтоговыеСуммы, Макет, КоэффициентПересчетаВТонны);
				МассивВыводимыхОбластей.Добавить(ОбластьВсего);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
			КонецЕсли;
			
			Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
				
				Если ОперацияОблагаетсяНДСУПокупателя Тогда
					ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице = "--";
					ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаНДСНаСтранице = "--";
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				ОбнулитьИтогиПоСтранице(ИтоговыеСуммы);
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("НомерСтраницы", "Страница " + НомерСтраницы);
				ОбластьЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			//Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
			//КонецЕсли;
			
		КонецЦикла;
		
		// Выводим итоги по последней странице
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
		
		Если ОперацияОблагаетсяНДСУПокупателя Тогда
			ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице = "--";
			ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаНДСНаСтранице = "--";
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакета = Макет.ПолучитьОбласть("Всего");
		ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);
		
		Если ОперацияОблагаетсяНДСУПокупателя Тогда
			ОбластьМакета.Параметры.ИтогоСуммаСНДС = "--";
			ОбластьМакета.Параметры.ИтогоСуммаНДС = "--";
		КонецЕсли;
			
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки,
					ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеПечати.Организация));
		ОбластьПодвала = ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати, ИтоговыеСуммы, Макет, КоэффициентПересчетаВТонны);
		ТабличныйДокумент.Вывести(ОбластьПодвала);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
				
	КонецЦикла;
	Возврат ТабличныйДокумент
КонецФункции  

Функция ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати, ИтоговыеСуммы, Макет, КоэффициентПересчетаВТонны)
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ПолнаяДатаДокумента = СтрЗаменить(Формат(ДанныеПечати.Дата, "ДЛФ=DD"),
		НСтр("ru = 'г.'", Метаданные.Языки.Русский.КодЯзыка),
		НСтр("ru = 'года'", Метаданные.Языки.Русский.КодЯзыка));
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель = СтрНайти(ПолнаяДатаДокумента, " ");
	ВторойРазделитель = СтрНайти(Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаДокументаДень", """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель -1 ) + """");
	СтруктураПараметров.Вставить("ДатаДокументаМесяц", Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1));
	СтруктураПараметров.Вставить("ДатаДокументаГод", Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель));
	
	// Главный бухгалтер
	СтруктураПараметров.Вставить("ФИОГлавБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
	
	// Отпуск товара разрешил
	СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
	СтруктураПараметров.Вставить("ДолжностьРуководителя", ДанныеПечати.ДолжностьРуководителя);
	
	СтруктураПараметров.Вставить("ФИОКладовщика", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Кладовщик, ДанныеПечати.Дата));
	СтруктураПараметров.Вставить("ДолжностьКладовщика", ДанныеПечати.ДолжностьКладовщика);
	
	//// Доверенность
	//СтруктураПараметров.Вставить("ДоверенностьНомер", ДанныеПечати.ДоверенностьНомер);
	//СтруктураПараметров.Вставить("ДоверенностьДата", Формат(ДанныеПечати.ДоверенностьДата, "ДЛФ=DD"));
	//СтруктураПараметров.Вставить("ДоверенностьВыдана", ДанныеПечати.ДоверенностьВыдана);
	//СтруктураПараметров.Вставить("ДоверенностьЧерезКого", ДанныеПечати.ДоверенностьЛицо);
	
	Если ИтоговыеСуммы.ИтогоКоличествоМест > 0 Тогда
		СтруктураПараметров.Вставить("ВсегоМестПрописью", ЧислоПрописью(ИтоговыеСуммы.ИтогоКоличествоМест, ,",,,,,,,,0"));
	КонецЕсли;
	
	Если ИтоговыеСуммы.ИтогоМассаНетто > 0 Тогда
		ПараметрыМассыПрописью = ПродажиСервер.ПараметрыМассыПрописью(ИтоговыеСуммы.ИтогоМассаНетто, КоэффициентПересчетаВТонны);
		СтруктураПараметров.Вставить("МассаНеттоПрописью", ЧислоПрописью(
			ИтоговыеСуммы.ИтогоМассаНетто * ПараметрыМассыПрописью.Коэффициент,
			"ДП=Истина",
			ПараметрыМассыПрописью.Формат));
	КонецЕсли;
	
	Если ИтоговыеСуммы.ИтогоМассаБрутто > 0 Тогда
		ПараметрыМассыПрописью = ПродажиСервер.ПараметрыМассыПрописью(ИтоговыеСуммы.ИтогоМассаБрутто, КоэффициентПересчетаВТонны);
		СтруктураПараметров.Вставить("МассаБруттоПрописью", ЧислоПрописью(
			ИтоговыеСуммы.ИтогоМассаБрутто * ПараметрыМассыПрописью.Коэффициент,
			"ДП=Истина",
			ПараметрыМассыПрописью.Формат));
	КонецЕсли;
	
	СтруктураПараметров.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписейПрописью);
	СтруктураПараметров.Вставить("СуммаПрописью", ИтоговыеСуммы.СуммаПрописью);
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	
	Возврат ОбластьМакета;
	
КонецФункции

Процедура ЗаполнитьРеквизитыШапкиТОРГ12(ДанныеПечати, Макет, ТабличныйДокумент)
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация,      ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетОрганизации);
	СведенияОПокупателе       = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент,       ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетКонтрагента);
	СведенияОГрузополучателе  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель,  ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетГрузополучателя);
	СведенияОГрузоотправитель = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетГрузоотправителя);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер));
	СтруктураПараметров.Вставить("ДатаДокумента", ДанныеПечати.Дата);
	
	Если ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель Тогда
		СтруктураПараметров.Вставить("ПредставлениеОрганизации", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике));
	Иначе
		СтруктураПараметров.Вставить("ПредставлениеОрганизации", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, 
			"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
	КонецЕсли;
	
	//СтруктураПараметров.Вставить("ПредставлениеПодразделения", ДанныеПечати.Подразделение);
	СтруктураПараметров.Вставить("ПредставлениеГрузополучателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, 
		"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
	СтруктураПараметров.Вставить("ПредставлениеПоставщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике));
	СтруктураПараметров.Вставить("ПредставлениеПлательщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе));
	СтруктураПараметров.Вставить("ОрганизацияПоОКПО", СведенияОГрузоотправитель.КодПоОКПО);
	СтруктураПараметров.Вставить("ВидДеятельностиПоОКДП", СведенияОПоставщике.КодОКВЭД);
	СтруктураПараметров.Вставить("ГрузополучательПоОКПО", СведенияОГрузополучателе.КодПоОКПО);
	СтруктураПараметров.Вставить("ПоставщикПоОКПО", СведенияОПоставщике.КодПоОКПО);
	СтруктураПараметров.Вставить("ПлательщикПоОКПО", СведенияОПокупателе.КодПоОКПО);
	СтруктураПараметров.Вставить("ОснованиеНомер", ДанныеПечати.ОснованиеНомер);
	СтруктураПараметров.Вставить("ОснованиеДата", ДанныеПечати.ОснованиеДата);
	СтруктураПараметров.Вставить("ТранспортнаяНакладнаяНомер", "");
	СтруктураПараметров.Вставить("ТранспортнаяНакладнаяДата", "");
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Функция СтруктураИтоговыеСуммы()
	
	Структура = Новый Структура;
	
	СтруктураРесурсовДляИтогов = СтруктураРесурсовДляИтогов();
	
	Для Каждого Элемент Из СтруктураРесурсовДляИтогов Цикл
		Структура.Вставить("Итого"+Элемент.Ключ+"НаСтранице", 0);
		Структура.Вставить("Итого"+Элемент.Ключ, 0);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Процедура ОбнулитьИтогиПоСтранице(ИтоговыеСуммы)
	
	СтруктураРесурсовДляИтогов = СтруктураРесурсовДляИтогов();
	
	Для Каждого Элемент Из СтруктураРесурсовДляИтогов Цикл
		ИтоговыеСуммы.Вставить("Итого"+Элемент.Ключ+"НаСтранице", 0);
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары, ОблагаетсяНДССМежценовойРазницы = Ложь)
	
	СтруктураСуммПоСтроке = СтруктураРесурсовДляИтогов();
	
	ЗаполнитьЗначенияСвойств(СтруктураСуммПоСтроке, СтрокаТовары);
	ОкруглитьДоЦелого(СтруктураСуммПоСтроке.КоличествоМест);
	Для Каждого Элемент Из СтруктураСуммПоСтроке Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Если ОблагаетсяНДССМежценовойРазницы
				И (Элемент.Ключ = "СуммаБезНДС") Тогда
				ЗначениеСтавкиНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтрокаТовары.СтавкаНДС);
				СуммаБезНДС = ?(ЗначениеСтавкиНДС = 0, 0, 100 * СтрокаТовары.СуммаНДС / ЗначениеСтавкиНДС);
				ИтоговыеСуммы["Итого"+Элемент.Ключ+"НаСтранице"] = ИтоговыеСуммы["Итого"+Элемент.Ключ+"НаСтранице"] + СуммаБезНДС;
				ИтоговыеСуммы["Итого"+Элемент.Ключ] = ИтоговыеСуммы["Итого"+Элемент.Ключ] + СуммаБезНДС;
			Иначе
				ИтоговыеСуммы["Итого"+Элемент.Ключ+"НаСтранице"] = ИтоговыеСуммы["Итого"+Элемент.Ключ+"НаСтранице"] + Элемент.Значение;
				ИтоговыеСуммы["Итого"+Элемент.Ключ] = ИтоговыеСуммы["Итого"+Элемент.Ключ] + Элемент.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОкруглитьДоЦелого(ОкругляемоеЧисло)
	Если ЗначениеЗаполнено(ОкругляемоеЧисло) Тогда
		Если ОкругляемоеЧисло <> Цел(ОкругляемоеЧисло) Тогда
			ОкругляемоеЧисло = Цел(ОкругляемоеЧисло) + 1;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СтруктураРесурсовДляИтогов()
	
	Структура = Новый Структура;
	
	Структура.Вставить("СуммаБезНДС",       0);
	Структура.Вставить("СуммаНДС",          0);
	Структура.Вставить("СуммаСНДС",         0);
	Структура.Вставить("Количество",        0);
	Структура.Вставить("КоличествоМест",    0);
	Структура.Вставить("КоличествоПринято", 0);
	Структура.Вставить("МассаБрутто",       0);
	Структура.Вставить("МассаНетто",        0);
	Структура.Вставить("Сумма",             0);
	
	Структура.Вставить("РазницаБезНДСУвеличение", 0);
	Структура.Вставить("РазницаБезНДСУменьшение", 0);
	Структура.Вставить("РазницаНДСУвеличение",    0);
	Структура.Вставить("РазницаНДСУменьшение",    0);
	Структура.Вставить("РазницаСНДСУвеличение",   0);
	Структура.Вставить("РазницаСНДСУменьшение",   0);
	
	Возврат Структура;
	
КонецФункции

Процедура ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, ВсегоНомеров, ВалютаРегламентированногоУчета)
	
	ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(ВсегоНомеров, ,",,,,,,,,0"));
	Если ИтоговыеСуммы.Свойство("ИтогоВсего") Тогда
		ИтоговыеСуммы.Вставить("СуммаПрописью", РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоВсего, ВалютаРегламентированногоУчета));
	Иначе
		ИтоговыеСуммы.Вставить("СуммаПрописью", РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоСуммаСНДС, ВалютаРегламентированногоУчета));
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти 

#Область ПечатьСчетНаОплату
Функция СформироватьСчетНаОплатуДопТовары(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) 
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СЧЕТ_2024";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьСчетовНаОплату.ПФ_MXL_СчетНаОплату");
	
	ПервыйДокумент = Истина;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документы.Ссылка КАК Ссылка,
	|	Документы.Номер КАК Номер,
	|	Документы.Дата КАК Дата,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
	|	Документы.Организация КАК Организация,
	|	Документы.Организация КАК ОрганизацияПоставщик,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	ЛОЖЬ КАК УчитыватьНДС,
	|	Документы.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС) КАК ОперацияОблагаетсяНДСУПокупателя,
	|	Документы.Контрагент КАК Контрагент,
	|	Документы.Контрагент.ЮрФизЛицо КАК КонтрагентЮрФизЛицо,
	|	Документы.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.ИностранныйБанк
	|				ИЛИ Документы.БанковскийСчетОрганизации.ВалютаДенежныхСредств <> Документы.Организация.ВалютаРегламентированногоУчета
	|				ИЛИ Документы.БанковскийСчетКонтрагента.ИностранныйБанк
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПлатежЗаРубеж,
	|	Документы.БанковскийСчетОрганизации.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчетОрганизации.НаименованиеБанкаМеждународное
	|		ИНАЧЕ Документы.БанковскийСчетОрганизации.Банк.МеждународноеНаименование
	|	КОНЕЦ КАК НаименованиеБанкаМеждународное,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчетОрганизации.НаименованиеБанкаДляРасчетовМеждународное
	|		ИНАЧЕ Документы.БанковскийСчетОрганизации.БанкДляРасчетов.МеждународноеНаименование
	|	КОНЕЦ КАК НаименованиеБанкаДляРасчетовМеждународное,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчетОрганизации.СВИФТБанка
	|		ИНАЧЕ Документы.БанковскийСчетОрганизации.Банк.СВИФТБИК
	|	КОНЕЦ КАК СВИФТБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетОрганизации.СВИФТБанкаДляРасчетов
	|		ИНАЧЕ Документы.БанковскийСчетОрганизации.БанкДляРасчетов.СВИФТБИК
	|	КОНЕЦ КАК СВИФТБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчетОрганизации.АдресБанкаМеждународный
	|		ИНАЧЕ Документы.БанковскийСчетОрганизации.Банк.АдресМеждународный
	|	КОНЕЦ КАК АдресБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетОрганизации.АдресБанкаДляРасчетовМеждународный
	|		ИНАЧЕ Документы.БанковскийСчетОрганизации.БанкДляРасчетов.АдресМеждународный
	|	КОНЕЦ КАК АдресБанкаДляРасчетов,
	|	Документы.БанковскийСчетОрганизации.СчетВБанкеДляРасчетов КАК СчетВБанкеДляРасчетов,
	|	Документы.БанковскийСчетОрганизации.НомерСчета КАК НомерБанковскогоСчета,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчетОрганизации.БИКБанка
	|		ИНАЧЕ КлассификаторБанков.Код
	|	КОНЕЦ КАК БИКБанк,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчетОрганизации.НаименованиеБанка
	|		ИНАЧЕ КлассификаторБанков.Наименование
	|	КОНЕЦ КАК НаименованиеБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчетОрганизации.КоррСчетБанка
	|		ИНАЧЕ КлассификаторБанков.КоррСчет
	|	КОНЕЦ КАК КоррСчетБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчетОрганизации.ГородБанка
	|		ИНАЧЕ КлассификаторБанков.Город
	|	КОНЕЦ КАК ГородБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетОрганизации.БИКБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Код
	|	КОНЕЦ КАК БИКБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетОрганизации.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Наименование
	|	КОНЕЦ КАК НаименованиеБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетОрганизации.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.КоррСчет
	|	КОНЕЦ КАК КоррСчетБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетОрганизации.ГородБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Город
	|	КОНЕЦ КАК ГородБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетОрганизации.ГородБанкаМеждународный
	|		ИНАЧЕ КлассификаторБанков.ГородМеждународный
	|	КОНЕЦ КАК ГородБанкаМеждународный,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетОрганизации.СтранаБанка
	|		ИНАЧЕ КлассификаторБанков.Страна
	|	КОНЕЦ КАК СтранаБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетОрганизации.ГородБанкаДляРасчетовМеждународный
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.ГородМеждународный
	|	КОНЕЦ КАК ГородБанкаДляРасчетовМеждународный,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетОрганизации.СтранаБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Страна
	|	КОНЕЦ КАК СтранаБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(КлассификаторБанков.БИКРКЦ.Наименование, """")
	|	КОНЕЦ КАК НаименованиеРКЦБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(КлассификаторБанковКорреспондентовРФ.БИКРКЦ.Наименование, """")
	|	КОНЕЦ КАК НаименованиеРКЦБанкаДляРасчетов,
	|	Документы.БанковскийСчетОрганизации.ТекстКорреспондента КАК БанковскийСчетТекстКорреспондента,
	|	Документы.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	Документы.Валюта КАК Валюта,
	|	Документы.Менеджер.ФизическоеЛицо КАК Менеджер,
	|	Документы.СуммаДокумента КАК СуммаКВозврату,
	|	ЛОЖЬ КАК ЧастичнаяОплата,
	|	"""" КАК НазначениеПлатежа,
	|	100 КАК ПроцентОплаты,
	|	"""" КАК ДополнительнаяИнформация,
	|	Документы.СуммаДокумента КАК СуммаДокумента,
	|	Документы.Грузоотправитель КАК Грузоотправитель,
	|	Документы.Грузополучатель КАК Грузополучатель,
	|	Документы.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	ЛОЖЬ КАК СчетКВозврату,
	|	Документы.Расш1255_ИспользоватьТоварыДляПечати КАК Расш1255_ИспользоватьТоварыДляПечати,
	|	Документы.Расш1255_ТоварыДляПечати.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Номенклатура.Код КАК Код,
	|		КоличествоУпаковок КАК Количество,
	|		Упаковка.Наименование КАК ЕдиницаИзмерения,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма
	|	) КАК Расш1255_ТоварыДляПечати
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО Документы.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
	|		ПО Документы.БанковскийСчетОрганизации.Банк = КлассификаторБанков.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанковКорреспондентовРФ
	|		ПО Документы.БанковскийСчетОрганизации.БанкДляРасчетов = КлассификаторБанковКорреспондентовРФ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";	
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	ДанныеПечати = Запрос.Выполнить().Выбрать();
	ИспользуетсяУчетНДС = ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС");
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	
	СтруктураИмяДопКолонки = Новый Структура("ИмяКолонкиКодов, ПредставлениеКолонкиКодов", ИмяКолонкиКодов, ПредставлениеКолонкиКодов);
	
	ПоказыватьНДС = Константы.ВыводитьДопКолонкиНДС.Получить();
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		Отказ = Ложь;
		Если НЕ ДанныеПечати.Расш1255_ИспользоватьТоварыДляПечати Тогда // дописать как называется флажек о доп товарах в запросе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В документе %1 отсутствуют товары. Печать ТОРГ-12 не требуется'"),
					ДанныеПечати.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка); 
			Отказ = Истина; 
		КонецЕсли;
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		//Реквизиты счета
		ОбластьМакета = Макет.ПолучитьОбласть("ОбразецЗаполненияПП");
		СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		СтруктураДанныхШапки = Новый Структура;
		СтруктураДанныхШапки.Вставить("ИНН", СведенияОПоставщике.ИНН);
		СтруктураДанныхШапки.Вставить("КПП",СведенияОПоставщике.КПП);
		ПредставлениеПоставщикаДляПлатПоручения = "";
		
		СтруктураДанныхШапки.Вставить("ИдентификаторПлатежа", ДанныеПечати.ИдентификаторПлатежа);
		
		Если ЗначениеЗаполнено(ДанныеПечати.БанковскийСчет) Тогда
			
			Если ЗначениеЗаполнено(ДанныеПечати.БИКБанкаДляРасчетов) Тогда
				Банк        = ?(ЗначениеЗаполнено(ДанныеПечати.НаименованиеРКЦБанкаДляРасчетов),
								ДанныеПечати.НаименованиеРКЦБанкаДляРасчетов + "//" + ДанныеПечати.НаименованиеБанкаДляРасчетов,
								ДанныеПечати.НаименованиеБанкаДляРасчетов);
				БИК         = ДанныеПечати.БИКБанкаДляРасчетов;
				КоррСчет    = ДанныеПечати.КоррСчетБанкаДляРасчетов;
				ГородБанка  = ДанныеПечати.ГородБанкаДляРасчетов;
				НомерСчета  = ДанныеПечати.КоррСчетБанка;
			Иначе
				Банк        = ?(ЗначениеЗаполнено(ДанныеПечати.НаименованиеРКЦБанка),
								ДанныеПечати.НаименованиеРКЦБанка + "//" + ДанныеПечати.НаименованиеБанка,
								ДанныеПечати.НаименованиеБанка);
				БИК         = ДанныеПечати.БИКБанк;
				КоррСчет    = ДанныеПечати.КоррСчетБанка;
				ГородБанка  = ДанныеПечати.ГородБанка;
				НомерСчета  = ДанныеПечати.НомерБанковскогоСчета;
			КонецЕсли;
			
			СтруктураДанныхШапки.Вставить("БИКБанкаПолучателя", БИК);
			СтруктураДанныхШапки.Вставить("БанкПолучателя", Банк);
			СтруктураДанныхШапки.Вставить("БанкПолучателяПредставление", СокрЛП(Банк) + " " + ГородБанка);
			СтруктураДанныхШапки.Вставить("СчетБанкаПолучателя", КоррСчет);
			СтруктураДанныхШапки.Вставить("СчетБанкаПолучателяПредставление", КоррСчет);
			СтруктураДанныхШапки.Вставить("СчетПолучателяПредставление", НомерСчета);
			СтруктураДанныхШапки.Вставить("СчетПолучателя", НомерСчета);
			ПредставлениеПоставщикаДляПлатПоручения = ДанныеПечати.БанковскийСчетТекстКорреспондента;
			
		КонецЕсли;
	
		Если ПустаяСтрока(ПредставлениеПоставщикаДляПлатПоручения) Тогда
			ПредставлениеПоставщикаДляПлатПоручения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеПечати.НазначениеПлатежа)
			И ТипЗнч(ДанныеПечати.Ссылка) <> Тип("ДокументСсылка.СчетНаОплатуКлиенту") Тогда
			
			СтруктураДанныхШапки.Вставить("НазначениеПлатежа", Документы.СчетНаОплатуКлиенту.СформироватьНазначениеПлатежа(
				ДанныеПечати.Номер, ДанныеПечати.Ссылка));
			
		Иначе
			
			СтруктураДанныхШапки.Вставить("НазначениеПлатежа", ДанныеПечати.НазначениеПлатежа);
			
		КонецЕсли;
		
		СтруктураДанныхШапки.Вставить("ПредставлениеПоставщикаДляПлатПоручения", ПредставлениеПоставщикаДляПлатПоручения);
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Заголовок, поставщик, покупатель
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
		ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru='Счет на оплату'", ОбщегоНазначения.КодОсновногоЯзыка()));
		СтруктураДанныхШапки = Новый Структура;
		СтруктураДанныхШапки.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		
		СтруктураДанныхПоставщик = Новый Структура;
		СтруктураДанныхПоставщик.Вставить("ПредставлениеПоставщика", 
		ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ОрганизацияПоставщик, ДанныеПечати.Дата),
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПоставщик);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		СтруктураДанныхПокупатель = Новый Структура;
		СтруктураДанныхПокупатель.Вставить("ПредставлениеПолучателя", 
		ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата),
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПокупатель);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		// Таблица "Товары"
		ОбластьШапкаТаблицы          	= Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрокаТаблицыСтандарт 	= Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьПодвалТаблицы         	= Макет.ПолучитьОбласть("ПодвалТаблицы");
		ОбластьПодвалНДС             	= Макет.ПолучитьОбласть("ПодвалТаблицыНДС");
		ОбластьПодвалСНДС 			 	= Макет.ПолучитьОбласть("ПодвалТаблицыВсегоСНДС");
		ОбластьСуммаПрописью 			= Макет.ПолучитьОбласть("СуммаПрописью");
		
		
		СтруктураДопПолеТаблицы = Новый Структура("ПредставлениеКолонкиКодов", "Артикул");
		ОбластьШапкаТаблицы.Параметры.Заполнить(СтруктураДопПолеТаблицы);
		МассивПроверкиВывода = Новый Массив;
		ВыводШапки = 0;

		Сумма = 0;
		НомерСтроки = 0;
		СтрокаТовары = ДанныеПечати.Расш1255_ТоварыДляПечати.Выбрать();
		
		Пока СтрокаТовары.Следующий() Цикл
			ОбластьСтрокаТаблицы = ОбластьСтрокаТаблицыСтандарт;
			НомерСтроки = НомерСтроки + 1;
			НомерСтрокиПечать = НомерСтроки;
				
			Если НомерСтроки = 0 И ВыводШапки <> 2 Тогда
				ВыводШапки = 1;
			КонецЕсли;
				
			ОбластьСтрокаТаблицы.Параметры.Заполнить(СтрокаТовары);
							
			МассивПроверкиВывода.Очистить();
			МассивПроверкиВывода.Добавить(ОбластьСтрокаТаблицы);
			Если НомерСтроки = СтрокаТовары.Количество() Тогда
				МассивПроверкиВывода.Добавить(ОбластьПодвалТаблицы);
				МассивПроверкиВывода.Добавить(ОбластьПодвалНДС);
				МассивПроверкиВывода.Добавить(ОбластьСуммаПрописью);
			КонецЕсли;
			
			Если ТабличныйДокумент.ПроверитьВывод(МассивПроверкиВывода) Тогда
				Если (НомерСтроки = 1 И ВыводШапки = 0) ИЛИ (НомерСтроки = 0 И ВыводШапки = 1) Тогда
					ВыводШапки = 2;
					ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
				КонецЕсли;
			Иначе
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
			
			Сумма = Сумма + СтрокаТовары.Сумма;
							
		КонецЦикла;
			
		СтруктураДанныхВсегоСкидки = Новый Структура;
		
		СтруктураДанныхВсегоСкидки.Вставить("Всего", Сумма);
		ОбластьПодвалТаблицы.Параметры.Заполнить(СтруктураДанныхВсегоСкидки);
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
			
		// Область подвал таблицы
		СтруктураДанныхПодвалНДС = Новый Структура;
		СтруктураДанныхПодвалНДС.Вставить("НДС", "НДС (Без НДС):");
		СтруктураДанныхПодвалНДС.Вставить("ВсегоНДС", "-");
		СтруктураДанныхПодвалНДС.Вставить("ВсегоСНДС", Формат(Сумма, "ЧДЦ=2"));
		ОбластьПодвалНДС.Параметры.Заполнить(СтруктураДанныхПодвалНДС);
		ТабличныйДокумент.Вывести(ОбластьПодвалНДС);
		ОбластьПодвалСНДС.Параметры.Заполнить(СтруктураДанныхПодвалНДС);			
		ТабличныйДокумент.Вывести(ОбластьПодвалСНДС);
		
		// Вывести Сумму прописью
		СуммаКПрописи = Сумма;
		ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'", ОбщегоНазначения.КодОсновногоЯзыка());
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", НомерСтроки);
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      ФормированиеПечатныхФорм.ФорматСумм(Сумма, ДанныеПечати.Валюта));
			
		СтруктураДанныхСуммаПрописью = Новый Структура;
		СтруктураДанныхСуммаПрописью.Вставить("СуммаПрописью", РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеПечати.Валюта));
		СтруктураДанныхСуммаПрописью.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
		ОбластьСуммаПрописью.Параметры.Заполнить(СтруктураДанныхСуммаПрописью);
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		// Вывести подписи
		Область = Макет.ПолучитьОбласть("ПодвалСчета");
		СтруктураДанныхПодвал = Новый Структура;
		СтруктураДанныхПодвал.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
		СтруктураДанныхПодвал.Вставить("ДолжностьРуководителя", "ИП");
		СтруктураДанныхПодвал.Вставить("ФИОБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
		СтруктураДанныхПодвал.Вставить("ФИОМенеджер", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Менеджер, ДанныеПечати.Дата));
		Область.Параметры.Заполнить(СтруктураДанныхПодвал);
		ТабличныйДокумент.Вывести(Область);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
	КонецЦикла;	
	Возврат ТабличныйДокумент
	
КонецФункции

#КонецОбласти 

#Область ДоговорКуплиПродажи
Функция СформироватьРозничныйДоговорКП(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) 
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.КлючПараметровПечати = "ПараметрыПечати_ДоговорПодряда";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщиеМакеты.ПФ_MXL_ДоговорКП");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслуг.Организация КАК Организация,
		|	ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслуг.Организация) КАК ПолноеНаименованиеОрганизации,
		|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
		|	ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслуг.Контрагент) КАК ПолноеНаименованиеКонтрагента,
		|	РеализацияТоваровУслуг.Дата КАК ДатаДог,
		|	РеализацияТоваровУслуг.Расш1255_ИспользоватьТоварыДляПечати КАК ИспользоватьТоварыДляПечати,
		|	РеализацияТоваровУслуг.Товары.(
		|		Сумма КАК Сумма
		|	) КАК Товары,
		|	РеализацияТоваровУслуг.Расш1255_ТоварыДляПечати.(
		|		Сумма КАК Сумма
		|	) КАК ТоварыДляПечати,
		|	РеализацияТоваровУслуг.Валюта КАК Валюта,
		|	ЕСТЬNULL(РеализацияТоваровУслуг.КонтактноеЛицо.ДолжностьПоВизитке, """") КАК ПокупательДолжность,
		|	ЕСТЬNULL(РеализацияТоваровУслуг.КонтактноеЛицо.Пол, ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)) КАК ПокупательПол,
		|	ЕСТЬNULL(РеализацияТоваровУслуг.КонтактноеЛицо.Наименование, """") КАК ПокупательФИО
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ТабДок.Очистить();
	//ТабДок.НачатьАвтогруппировкуСтрок();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ВставлятьРазделительСтраниц = Ложь;
	Пока Выборка.Следующий() Цикл //перебора массива объектов
		Если ВставлятьРазделительСтраниц Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;	
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		ОбластьШапка.Параметры.Заполнить(Выборка);
		
		Если Выборка.ИспользоватьТоварыДляПечати Тогда
			ТзСмета = Выборка.ТоварыДляПечати.Выгрузить();	
		Иначе
			ТзСмета = Выборка.Товары.Выгрузить();	
		КонецЕсли;
		
		
		Сумма			= ТзСмета.Итог("Сумма") ;
		СуммаКПрописи   = Сумма;
		СуммаПрописью   = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Выборка.Валюта);
        ПредставлениеПодрядчика = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Выборка.Организация, Выборка.ДатаДог);			
		ПредставлениеЗаказчика = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Выборка.Контрагент, Выборка.ДатаДог);
		
		ОбластьШапка.Параметры.Сумма = СуммаКПрописи;
		ОбластьШапка.Параметры.СуммаПрописью = СуммаПрописью;
		ОбластьШапка.Параметры.ДатаДоговора = Формат(Выборка.ДатаДог, "ДЛФ=D");
		//покупатель
		ОбластьШапка.Параметры.ПолноеНаименованиеКонтрагента = ПредставлениеЗаказчика.ПолноеНаименование;
		ОбластьШапка.Параметры.СловоИменуемоеДляКонтрагента = СловоИменуемое(ПредставлениеЗаказчика.ЮрФизЛицо);
		
		//ОбластьШапка.Параметры.ПредставительКонтрагента = "в лице _____________________________________, действующего на основании Устава";
		ОбластьШапка.Параметры.ПредставительКонтрагента = СформироватьТекстПредставителя(ПредставлениеЗаказчика, 
																						Выборка.ПокупательФИО,
																						Выборка.ПокупательПол,
																						Выборка.ПокупательДолжность);
		ОбластьШапка.Параметры.ЮридическийАдресКонтрагента = ПредставлениеЗаказчика.ЮридическийАдрес;
		ОбластьШапка.Параметры.ИНН_КППКонтрагента = ПредставлениеЗаказчика.ИНН + ?(ПустаяСтрока(ПредставлениеЗаказчика.КПП),"", "/" + ПредставлениеЗаказчика.КПП);
		ОбластьШапка.Параметры.БанковскиеРеквизитыКонтрагента = "р/с " +ПредставлениеЗаказчика.НомерСчета + Символы.ПС
																+ ПредставлениеЗаказчика.Банк + Символы.ПС
																+ "БИК: " + ПредставлениеЗаказчика.БИК + Символы.ПС
																+ "к/с: " + ПредставлениеЗаказчика.КоррСчет;
		ОбластьШапка.Параметры.ТелефонКонтрагента = ПредставлениеЗаказчика.Телефоны;
		ОбластьШапка.Параметры.АдресЭлектроннойПочтыКонтрагента = ПредставлениеЗаказчика.ЭлектроннаяПочта;
		//Продавец
		ОбластьШапка.Параметры.ПолноеНаименованиеОрганизации = ПредставлениеПодрядчика.ПолноеНаименование;
		ОбластьШапка.Параметры.СловоИменуемоеДляОрганизации = СловоИменуемое(ПредставлениеПодрядчика.ЮрФизЛицо);
		ДанныеРуководитель = ПолучитьДанныеРуководителяОрганизации(Выборка.Организация, Выборка.ДатаДог);
		ОбластьШапка.Параметры.ПредставительОрганизации = СформироватьТекстПредставителя(ПредставлениеПодрядчика, 
																						ДанныеРуководитель.ФИО,
																						ДанныеРуководитель.Пол,
																						ДанныеРуководитель.Должность,
																						ДанныеРуководитель.Основание);
		
		ОбластьШапка.Параметры.ЮридическийАдресОрганизации = ПредставлениеПодрядчика.ЮридическийАдрес;
		ОбластьШапка.Параметры.ИНН_КППОрганизации = ПредставлениеПодрядчика.ИНН + ?(ПустаяСтрока(ПредставлениеПодрядчика.КПП),"", "/" + ПредставлениеПодрядчика.КПП) ;
		ОбластьШапка.Параметры.БанковскиеРеквизитыОрганизации = "р/с " +ПредставлениеПодрядчика.НомерСчета + Символы.ПС
																+ ПредставлениеПодрядчика.Банк + Символы.ПС
																+ "БИК: " + ПредставлениеПодрядчика.БИК + Символы.ПС
																+ "к/с: " + ПредставлениеПодрядчика.КоррСчет;
		ОбластьШапка.Параметры.ТелефонОрганизации = ПредставлениеПодрядчика.Телефоны;
		ОбластьШапка.Параметры.АдресЭлектроннойПочтыОрганизации = ПредставлениеПодрядчика.ЭлектроннаяПочта;
		ОбластьШапка.Параметры.СрокДействияДоговора = Формат(КонецГода(Выборка.ДатаДог), "ДЛФ=D");
		ОбластьШапка.Параметры.НомерДоговора = Формат(Выборка.ДатаДог, "ДФ=гггг/ММ-дд");

		
		ТабДок.Вывести(ОбластьШапка);
	
		ВставлятьРазделительСтраниц = Истина;
		//подключимся к общ механизму обл печати
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
	КонецЦикла; //перебора массива объектов
	Возврат ТабДок;
КонецФункции 

Функция СловоИменуемое(ВидЮЛ)
	Если ВидЮЛ = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда 
		возврат "именуемое";
	Иначе
		возврат "именуемый";
	КонецЕсли;
КонецФункции  

Функция СформироватьТекстПредставителя(СведенияОФизЮлЛице, Фио, Пол, Должность, ОснованиеРук="Устава")
	Если СведенияОФизЮлЛице.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		Возврат "действующий на основании ОГРНИП " + СведенияОФизЮлЛице.ОГРН; 
	ИначеЕсли СведенияОФизЮлЛице.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		РезСклоненияФИО = СклонениеПредставленийОбъектов.ПросклонятьФИО(ФИО, 2);
		РезСклоненияДолжности = СклонениеПредставленийОбъектов.ПросклонятьПредставление(Должность, 2);
		Возврат "в лице " + РезСклоненияДолжности + " " 
				+ ?(ПустаяСтрока(РезСклоненияФИО),"________________________________", РезСклоненияФИО) 
				+ ", действующего на основании " + ОснованиеРук;
	КонецЕсли;	
КонецФункции

Функция ПолучитьДанныеРуководителяОрганизации(Организация, Дата)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ОтветственныеЛицаОрганизаций.ФизическоеЛицо.Пол КАК Пол,
	               |	ОтветственныеЛицаОрганизаций.ФизическоеЛицо.Представление КАК ФИО,
	               |	ОтветственныеЛицаОрганизаций.Должность КАК Должность,
	               |	ОтветственныеЛицаОрганизаций.ОснованиеПраваПодписи КАК Основание
	               |ИЗ
	               |	Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
	               |ГДЕ
	               |	ОтветственныеЛицаОрганизаций.Владелец = &Организация
	               |	И ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	               |	И ОтветственныеЛицаОрганизаций.ДатаНачала <= &Дата
	               |	И (ОтветственныеЛицаОрганизаций.ДатаОкончания >= НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	               |			ИЛИ ОтветственныеЛицаОрганизаций.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ДанныеРуководителя = Новый Структура("Пол,ФИО,Должность,Основание");
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеРуководителя, Выборка);
	КонецЕсли;
	
	Возврат ДанныеРуководителя;
КонецФункции

#КонецОбласти
